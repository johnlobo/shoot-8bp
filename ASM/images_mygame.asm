IMAGE_LIST
;---------------------------------------------------------------------------------------------
;pondremos aqui una lista de las imagenes que queremos usar sin especificar la direccion de memoria desde basic
; de este modo el comando |SETUPSP,<id>,9,<address> se transforma en |SETUPSP,<id>,9,<numero>
; la ventaja de no usar direcciones de memoria en basic es que si ampliamos los graficos o se reensamblan en 
; direcciones diferentes, el numero que asignemos no cambiara
; NO tienen que tener todas un numero, solo aquellas que vamos a usar con |setupsp, id, 9,<num>
; se empiezan a numerar en 16
; podemos usar hasta 255 imagenes especificadas de este modo 
; no hace falta que la lista tenga 255 elementos. es de longitud variable, incluso puede estar vacia
;----------------------------------------------------------------------------------------------
dw G_baddie_fly_0;16
dw G_baddie_fly_1;17
dw G_baddie_fly_2;18
;;dw G_baddie_fly_3;19
;;dw G_baddie_fly_4;20
;;dw G_baddie_fly_5;21
;;dw G_baddie_fly_6;22
;;dw G_baddie_fly_7;23
;;dw G_explosion_8x8_00;24
;;dw G_explosion_8x8_01;25
;;dw G_explosion_8x8_02;26
;;dw G_explosion_8x8_03;27
;;dw G_explosion_8x8_04;28
dw G_ship00_0;29 ;19
dw G_ship00_0;30 ;20
dw G_ship00_0;31 ;21



; ahora las imagenes
;=================================================
; si no vas a usar el comando PRINTAT,  sino simplemente los caracteres del amstrad, entonces
; puedes comentar la siguientes 3 lineas
_BEGIN_ALPHABET
read "alphabet_default.asm"
_END_ALPHABET
;=================================================
_SPRITE_HEIGHTS_TABLE	ds 32 ; 32 bytes para almacenar las alturas de los sprites y poderlos ordenar. uso interno.
;=================================================
_BEGIN_FLIP_IMAGES
;=================================================
; aqui pon las imagenes que se definen como otras existentes pero flipeadas horizontalmente. 

; los frames del soldado a la izquierda los defino como flipeados. es mas lento pero gasta menos ram


;=================================================
_END_FLIP_IMAGES
;=================================================
;=================================================
_BEGIN_IMAGES
;=================================================

;;// Tile G_baddie_fly_0: 8x8 pixels, 4x8 bytes.
G_baddie_fly_0
db 4 ; ancho
db 8 ; alto
db	0x00, 0x00, 0x00, 0x00
db	0x8c, 0x88, 0x00, 0x00
db	0x00, 0xcc, 0x01, 0x02
db	0x45, 0x33, 0x88, 0x00
db	0x45, 0x3b, 0x33, 0x2a
db	0x45, 0x33, 0x88, 0x00
db	0x00, 0xcc, 0x01, 0x02
db	0x8c, 0x88, 0x00, 0x00

;;// Tile G_baddie_fly_1: 8x8 pixels, 4x8 bytes.
G_baddie_fly_1
db 4 ; ancho
db 8 ; alto
db	0x00, 0x00, 0x02, 0x00
db	0x00, 0x01, 0x00, 0x00
db	0x8c, 0x89, 0x37, 0x00
db	0x11, 0x33, 0x22, 0x02
db	0x45, 0x3b, 0x03, 0x00
db	0x45, 0x9b, 0x88, 0x00
db	0x00, 0x44, 0x00, 0x00
db	0x44, 0x08, 0x00, 0x00

// Tile G_baddie_fly_2: 8x8 pixels, 4x8 bytes.
G_baddie_fly_2
db 4 ; ancho
db 8 ; alto
db	0x01, 0x15, 0x01, 0x00
db	0x01, 0x11, 0x01, 0x00
db	0x00, 0x99, 0x88, 0x00
db	0x44, 0x33, 0x66, 0x00
db	0xcc, 0x37, 0x66, 0x88
db	0x08, 0xcf, 0x8a, 0x08
db	0x88, 0x00, 0x00, 0x88
db	0x00, 0x00, 0x00, 0x00

;;// Tile G_baddie_fly_: 8x8 pixels, 4x8 bytes.
;;const u8 G_baddie_fly_3[32] = {
;;	0x00, 0x02, 0x00, 0x00,
;;	0x00, 0x01, 0x00, 0x00,
;;	0x15, 0x23, 0x8c, 0x88,
;;	0x02, 0x33, 0x33, 0x00,
;;	0x01, 0x13, 0x6f, 0x00,
;;	0x00, 0x99, 0xcf, 0x00,
;;	0x00, 0x44, 0x00, 0x00,
;;	0x00, 0x00, 0x4c, 0x00
;;};
;;
;;// Tile G_baddie_fly_4: 8x8 pixels, 4x8 bytes.
;;const u8 G_baddie_fly_4[32] = {
;;	0x00, 0x00, 0x8c, 0x88,
;;	0x03, 0x44, 0x88, 0x00,
;;	0x00, 0x99, 0xcf, 0x00,
;;	0x3b, 0x33, 0x6f, 0x00,
;;	0x00, 0x99, 0x33, 0x00,
;;	0x03, 0x44, 0x88, 0x00,
;;	0x00, 0x00, 0x8c, 0x88,
;;	0x00, 0x00, 0x00, 0x00
;;};
;;
;;// Tile G_baddie_fly_5: 8x8 pixels, 4x8 bytes.
;;const u8 G_baddie_fly_5[32] = {
;;	0x00, 0x00, 0x4c, 0x00,
;;	0x00, 0x44, 0x00, 0x00,
;;	0x00, 0x99, 0xcf, 0x00,
;;	0x01, 0x13, 0x6f, 0x00,
;;	0x02, 0x33, 0x33, 0x00,
;;	0x15, 0x23, 0x8c, 0x88,
;;	0x00, 0x01, 0x00, 0x00,
;;	0x00, 0x02, 0x00, 0x00
;;};
;;
;;// Tile G_baddie_fly_6: 8x8 pixels, 4x8 bytes.
;;const u8 G_baddie_fly_6[32] = {
;;	0x88, 0x00, 0x00, 0x88,
;;	0x08, 0xcf, 0x8a, 0x08,
;;	0xcc, 0x37, 0x66, 0x88,
;;	0x44, 0x33, 0x66, 0x00,
;;	0x00, 0x99, 0x88, 0x00,
;;	0x01, 0x11, 0x01, 0x00,
;;	0x01, 0x15, 0x01, 0x00,
;;	0x00, 0x00, 0x00, 0x00
;;};
;;
;;// Tile G_baddie_fly_7: 8x8 pixels, 4x8 bytes.
;;const u8 G_baddie_fly_7[32] = {
;;	0x44, 0x08, 0x00, 0x00,
;;	0x00, 0x44, 0x00, 0x00,
;;	0x45, 0x9b, 0x88, 0x00,
;;	0x45, 0x3b, 0x03, 0x00,
;;	0x11, 0x33, 0x22, 0x02,
;;	0x8c, 0x89, 0x37, 0x00,
;;	0x00, 0x01, 0x00, 0x00,
;;	0x00, 0x00, 0x02, 0x00
;;

// Tile G_ship00_0: 10x14 pixels, 5x14 bytes.
G_ship00_0
db 5 ; ancho
db 14 ; alto
db	0x00, 0x00, 0xaa, 0x00, 0x00
db	0x00, 0x00, 0xaa, 0x00, 0x00
db	0x00, 0x00, 0xaa, 0x00, 0x00
db	0x00, 0x40, 0xff, 0x00, 0x00
db	0x00, 0x40, 0xff, 0x00, 0x00
db	0x00, 0x40, 0xff, 0x00, 0x00
db	0x00, 0xc0, 0xf7, 0xaa, 0x00
db	0x00, 0xc0, 0xf7, 0xaa, 0x00
db	0x00, 0xd1, 0xf3, 0xaa, 0x00
db	0x00, 0xfb, 0xf3, 0xaa, 0x00
db	0x40, 0xea, 0xf7, 0xff, 0x00
db	0xd5, 0xea, 0xff, 0xd5, 0xaa
db	0xc0, 0x62, 0xff, 0x62, 0x80
db	0x00, 0x2a, 0xaa, 0x2a, 0x00

// Tile G_ship00_1: 10x14 pixels, 5x14 bytes.
G_ship00_1
db 5 ; ancho
db 14 ; alto
db	0x00, 0x00, 0xaa, 0x00, 0x00
db	0x00, 0x00, 0xaa, 0x00, 0x00
db	0x00, 0x00, 0xaa, 0x00, 0x00
db	0x00, 0x55, 0xaa, 0x00, 0x00
db	0x00, 0x55, 0xea, 0x00, 0x00
db	0x00, 0x55, 0xea, 0x00, 0x00
db	0x00, 0xff, 0xea, 0x00, 0x00
db	0x00, 0xff, 0xe2, 0x80, 0x00
db	0x00, 0xfb, 0xf2, 0x80, 0x00
db	0x00, 0xfb, 0xf2, 0x80, 0x00
db	0x55, 0xff, 0xe2, 0x80, 0x00
db	0xff, 0xff, 0xea, 0xc0, 0x00
db	0xff, 0x77, 0xc0, 0xca, 0x00
db	0x11, 0x3b, 0xaa, 0x00, 0x00

// Tile G_ship00_2: 10x14 pixels, 5x14 bytes.
G_ship00_2
db 5 ; ancho
db 14 ; alto
db	0x00, 0x00, 0xaa, 0x00, 0x00
db	0x00, 0x00, 0xaa, 0x00, 0x00
db	0x00, 0x00, 0xaa, 0x00, 0x00
db	0x00, 0x00, 0xff, 0x00, 0x00
db	0x00, 0x40, 0xff, 0x00, 0x00
db	0x00, 0x40, 0xff, 0x00, 0x00
db	0x00, 0x40, 0xff, 0xaa, 0x00
db	0x00, 0xc0, 0xf7, 0xaa, 0x00
db	0x00, 0xd0, 0xf3, 0xaa, 0x00
db	0x00, 0xd0, 0xf3, 0xaa, 0x00
db	0x00, 0xc0, 0xf7, 0xff, 0x00
db	0x40, 0xc0, 0xff, 0xff, 0xaa
db	0x40, 0xca, 0xd5, 0x77, 0xaa
db	0x00, 0x00, 0xbb, 0x3b, 0x00

;=================================================
_END_IMAGES
;=================================================

;=================================================
_BEGIN_3D_ZOOM_IMAGES
;=================================================
; limites aplicables a todas las imagenes con zoom
; para estos limites se considera el horizonte como el 0 y hacia abajo va creciendo hasta 200

_ZOOM_LIMIT_A
db 120; entre 0 y limitA se pone imagen 3

_ZOOM_LIMIT_B
db 50
;db 80; entre este limite y el limite A, se pone imagen 2
;mas cerca que limit B se pone imagen 1
;=================================================
; las imagenes de tipo zoom se definen aqui. 

;CARTEL_ZOOM
;db 1; ancho simbolico
;db 1; alto simbolico
;dw CARTEL1, CARTEL2, CARTEL3



;=================================================
_END_3D_ZOOM_IMAGES
;=================================================

;=================================================================
_BEGIN_3D_SEGMENTS
;=================================================================
; el ancho es el de la scanline
; el alto es el alto real
; luego va el dx, que puede ser positivo ( inclinado a izquierda) o negativo (inclinado a derecha)
; finalmente podria ir un dy que indique alto de patron de repeticion
db 0; esto es para que la primera imagen de tipo segmento sea > _3D_SEGMENTS
;--------------------------------------------------------------------

; 
;----------------- SEGMENTOS RECTOS --------------------------------
;SEGMENT_L0
;db 20; ancho
;db 50; alto
;db 0; dx
;db 192,192,192,192, 192,192,192,192 ,192,240,240, 0, 0, 0, 0, 0, 0, 0, 0, 0
;-------------------------------------------------------------------


;=================================================
_END_3D_SEGMENTS
;=================================================

_END_GRAPH